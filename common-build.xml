<?xml version="1.0"?>

<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at
 
        http://www.apache.org/licenses/LICENSE-2.0
 
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
 -->
        
<project name="common" >
  <description>
    This file is designed for importing into a main build file, and not intended
    for standalone use.
  </description>

  <dirname file="${ant.file.common}" property="common.dir"/>

  <!-- Give user a chance to override without editing this file
      (and without typing -D each time it compiles it -->
  <property file="${user.home}/jwordnet.build.properties"/>
  <property file="${user.home}/build.properties"/>
  <property file="${basedir}/build.properties"/>
  <property file="${common.dir}/build.properties"/>

  <tstamp>
    <format property="current.year" pattern="yyyy"/>
    <format property="DSTAMP" pattern="yyyy-MM-dd"/>
    <format property="TSTAMP" pattern="HH:mm:ss"/>
  </tstamp>

  <property name="name" value="${ant.project.name}"/>
  <property name="Name" value="JWordNet"/>
  <property name="version" value="1.5.6-dev"/>
  <property name="spec.version" value="${version}"/>    
  <property name="year" value="2007-${current.year}"/>
  <property name="final.name" value="jwordnet-${name}-${version}"/>

  <!-- <property name="junit.jar" value="junit-3.8.2.jar"/> -->
  <property name="junit.jar" value="junit-4.4.jar"/>
  <property name="junit-location.jar" value="${common.dir}/lib/${junit.jar}"/>
  <path id="junit-path">
    <pathelement location="${junit-location.jar}"/>
  </path>

  <property name="javac.deprecation" value="on"/>
  <property name="javac.debug" value="on"/>
  <property name="javac.source" value="1.5"/>
  <property name="javac.target" value="1.5"/>

  <property name="javadoc.link" value="http://java.sun.com/j2se/1.5/docs/api/"/>
  <property name="javadoc.access" value="protected"/>
  <property name="javadoc.dir" value="${common.dir}/build/docs/api"/>
  <!-- Javadoc classpath -->
  <path id="javadoc.classpath">
    <path refid="classpath"/>
    <pathelement location="${ant.home}/lib/ant.jar"/>
  </path>
        
  <property name="changes.src.dir" value="${common.dir}/src/site/changes"/>
  <property name="changes.target.dir" value="${common.dir}/build/docs/changes"/>

  <property name="build.encoding" value="utf-8"/>

  <property name="src.dir" location="src"/>
  <property name="test.dir" location="test"/>
  <property name="build.dir" location="build"/>
  <property name="dist.dir" location="dist"/>

  <property name="junit.output.dir" location="${build.dir}/test"/>
  <property name="junit.reports" location="${build.dir}/test/reports"/>
  <property name="junit.includes" value="**/Test*.java,**/*Test.java"/>
  <property name="junit.excludes" value=""/>

  <property name="manifest.file" location="${common.dir}/build/MANIFEST.MF"/>
        
  <available
    property="jflex.present"
    classname="JFlex.anttask.JFlexTask"
    classpath="${jflex.home}/lib/JFlex.jar"
  />

  <target name="clean"
    description="Removes contents of build and dist directories">
    <delete dir="${build.dir}"/>
    <delete dir="${dist.dir}"/>
    <delete file="velocity.log"/>
  </target>

  <target name="init" depends="">
  </target>

  <target name="compile-core" depends="init"
          description="Compiles core classes">
    <compile
      srcdir="${src.dir}"
      destdir="${build.dir}/classes/java">
      <classpath refid="classpath"/>
    </compile>
  </target>

  <target name="compile" depends="compile-core">
    <!-- convenience target to compile core -->
  </target>

  <target name="jar-core" depends="compile-core"
    description="Packages the JAR file">
    <jarify/>
  </target>

  <macrodef name="jarify" description="Builds a JAR file">
        <attribute name="basedir" default="${build.dir}/classes/java"/>
        <attribute name="destfile" default="${build.dir}/${final.name}.jar"/>
        <element name="manifest-attributes" optional="yes"/>
        <element name="metainf-includes" optional="yes"/>
    <sequential>
      <!-- If possible, include the svnversion -->
      <exec dir="." executable="svnversion"
            outputproperty="svnversion" failifexecutionfails="false">
        <arg line="."/>
      </exec>
      
      <jar
        destfile="@{destfile}"
        basedir="@{basedir}"
        >
        <manifest>
          <manifest-attributes/>
        </manifest>
        <metainf dir="${common.dir}">
          <include name="LICENSE.txt"/>
          <include name="NOTICE.txt"/>
        </metainf>
        <metainf-includes/>
      </jar>
    </sequential>
  </macrodef>

  <target name="compile-test" depends="compile-core">
    <compile
      srcdir="${test.dir}"
      destdir="${build.dir}/classes/test">
      <classpath refid="test.classpath"/>
    </compile>

    <!-- Copy any data files present to the classpath -->
    <copy todir="${build.dir}/classes/test">
      <fileset dir="${test.dir}" excludes="**/*.java"/>
    </copy>
  </target>

  <property name="tests.verbose" value="false"/>

  <target name="test" depends="compile-test" description="Runs unit tests">
    <mkdir dir="${junit.output.dir}"/>
    <junit 
      fork="yes"
      maxmemory="256m"
      printsummary="off"
      haltonfailure="no"
      errorProperty="tests.failed" 
      failureProperty="tests.failed">
      <classpath refid="junit.classpath"/>
      <assertions>
        <enable package="edu.brandeis.cs.steele"/>
      </assertions>

      <!-- allow tests to control debug prints -->
      <sysproperty key="tests.verbose" value="${tests.verbose}"/>

      <!-- TODO: create propertyset for test properties, so each project can have its own set -->
      <sysproperty key="dataDir" file="test"/>
      <sysproperty key="tempDir" file="${build.dir}/test"/>
      <sysproperty key="java.io.tmpdir" file="${build.dir}/test"/>

      <formatter type="xml"/>
      <formatter type="brief" usefile="false"/>
      <batchtest fork="yes" todir="${junit.output.dir}" unless="testcase">
        <fileset dir="${test.dir}" includes="${junit.includes}" excludes="${junit.excludes}"/>
      </batchtest>
      <batchtest fork="yes" todir="${junit.output.dir}" if="testcase">
        <fileset dir="${test.dir}" includes="**/${testcase}.java"/>
      </batchtest>
    </junit>
    <!-- create this file, then if we don't fail, delete it -->
    <!-- this meme makes it easy to tell if contribs have failed later -->
    <echo file="${build.dir}/test/junitfailed.flag">MAYBE</echo>
    <fail if="tests.failed">Tests failed!</fail>
    <!-- life would be easier if echo had an 'if' attribute like fail -->
    <delete file="${build.dir}/test/junitfailed.flag" />
    
  </target>

  <target name="generate-test-reports" description="Generates test reports">
    <mkdir dir="${junit.reports}"/>
    <junitreport todir="${junit.output.dir}">
      <!-- this fileset let's the task work for individual contribs,
           as well as the project as a whole
       -->
      <fileset dir="${build.dir}">
        <include name="**/test/TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${junit.reports}"/>
    </junitreport>
  </target>

  <target name="jar" depends="jar-core">
    <!-- convenience target to package core JAR -->
  </target>

  <target name="jar-src" depends="init">
    <jarify basedir="${src.dir}" destfile="${build.dir}/${final.name}-src.jar"/>
  </target>

  <target name="default" depends="jar-core"/>

  <!--+
      | M A C R O S
      +-->
  <macrodef name="compile">
    <attribute name="srcdir"/>
    <attribute name="destdir"/>
    <element name="nested" implicit="yes" optional="yes"/>

    <sequential>
      <mkdir dir="@{destdir}"/>
      <javac
        encoding="${build.encoding}"
        srcdir="@{srcdir}"
        destdir="@{destdir}"
        deprecation="${javac.deprecation}"
        debug="${javac.debug}"
        source="${javac.source}"
        target="${javac.target}">
        <nested/>
        <compilerarg line="-Xmaxwarns 10000000"/>
        <compilerarg line="-Xmaxerrs 10000000"/>
      </javac>
    </sequential>
  </macrodef>

  <macrodef name="invoke-javadoc">
    <element name="sources" optional="yes"/>
    <attribute name="destdir"/>
    <attribute name="title" default="${Name} ${version} API"/>
    <sequential>
      <javadoc
          packagenames="edu.brandeis.cs.steele.*"
          destdir="@{destdir}"
          access="${javadoc.access}"
          encoding="${build.encoding}"
          author="true"
          version="true"
          use="true"
          source="${ant.java.version}"
          link="${javadoc.link}"
          windowtitle="${Name} ${version} API"
          doctitle="@{title}">
        <link offline="true" packagelistLoc="${javadoc.dir}"/>
        
        <sources />
                
        <classpath refid="javadoc.classpath"/>
      </javadoc>
   </sequential>
  </macrodef>

</project>
