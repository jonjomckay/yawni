<?xml version="1.0"?>

<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at
 
        http://www.apache.org/licenses/LICENSE-2.0
 
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
 -->

<project name="core" default="default" basedir=".">

  <import file="common-build.xml"/>

  <property name="build.demo.template" value="src/demo/demo-build.template"/> 

  <!-- Type of checksum to compute for distribution files -->
  <property name="checksum.algorithm" value="md5" />
	
  <!-- Build classpath -->
  <path id="classpath">
    <pathelement location="${build.dir}/classes/java"/>
  </path>

  <path id="demo.classpath">
    <path refid="classpath"/>
    <pathelement location="${build.dir}/classes/demo"/>
  </path>
  
  <path id="test.classpath">
    <path refid="demo.classpath"/>
    <path refid="junit-path"/>
    <pathelement location="${build.dir}/classes/test"/>
  </path>


  <path id="junit.classpath">
    <path refid="junit-path"/>
    <!-- TODO pre-1.7 ant classpath issues with the junit suck;
    using ant -lib pathToJunit -->
    <!-- <pathelement location="${ant.home}/lib/ant-junit.jar"/> -->
    <pathelement location="${build.dir}/classes/test"/>
    <pathelement location="${build.dir}/classes/java"/>
    <pathelement location="${build.dir}/classes/demo"/>
    <pathelement path="${java.class.path}"/>
  </path>

  <patternset id="src.dist.patterns"
              includes="src/,build.xml,*build*.xml,docs/,*.txt,contrib/,"
              excludes="contrib/db/*/lib/,contrib/*/ext-libs/,src/site/build/,contrib/benchmark/temp/*,contrib/benchmark/work/*"
  />
  <patternset id="binary.build.dist.patterns"
              includes="${final.name}.jar,${demo.war.name}.war,${demo.name}.jar,docs/,contrib/*/*.jar"
  />
  <patternset id="binary.root.dist.patterns"
              includes="src/demo/,src/jsp/,docs/,*.txt,contrib/*/README*"
              excludes="${build.demo.template}"
  />


  <!-- ================================================================== -->
  <!-- Prepares the build directory                                       -->
  <!-- ================================================================== -->

  <!-- Overrides common.compile-core to ... -->
  <target name="compile-core" depends="common.compile-core"
          description="Compiles core classes">
  </target>

  <target name="test-core" depends="common.test"
          description="Runs unit tests for the core JWordNet code"
  />
  <target name="test" depends="test-core"
          description="Runs all unit tests"
  />
  
  <!-- ================================================================== -->
  <!-- J A R                                                              -->
  <!-- ================================================================== -->
  <!--                                                                    -->
  <!-- ================================================================== -->

  <target name="compile-test" depends="common.compile-test"/>



  <!-- ================================================================== -->
  <!-- D O C U M E N T A T I O N                                          -->
  <!-- ================================================================== -->
  <!--                                                                    -->
  <!-- ================================================================== -->

  <target name="javadocs" description="Generate javadoc" 
  	      depends="javadocs-core"/>
	
  <target name="javadocs-core" description="Generate javadoc for core classes">
    <sequential>
      <mkdir dir="${javadoc.dir}/core"/>
      <invoke-javadoc
        destdir="${javadoc.dir}/core"
      	title="${Name} ${version} core API">
        <sources>
          <packageset dir="{src.dir}"/>
        </sources>
      </invoke-javadoc>
     <jarify basedir="${javadoc.dir}/core" destfile="${build.dir}/${final.name}-javadoc.jar"/>
    </sequential>
  </target>

  <!-- ================================================================== -->
  <!-- D I S T R I B U T I O N                                            -->
  <!-- ================================================================== -->
  <!--                                                                    -->
  <!-- ================================================================== -->
  <target name="package" depends="jar-core, javadocs, init-dist">
  </target>

  <target name="nightly" depends="test, package-tgz, changes-to-html">
  </target>

  <!-- ================================================================== -->
  <!-- Packages the distribution with zip                                 -->
  <!-- ================================================================== -->
  <!--                                                                    -->
  <!-- ================================================================== -->
  <target name="package-zip" depends="package"
    description="--> Generates the JWordNet distribution as .zip">

    <delete file="${dist.dir}/jwordnet-${version}.zip"/>
    <zip destfile="${dist.dir}/jwordnet-${version}.zip">
      <zipfileset prefix="jwordnet-${version}" dir=".">
        <patternset refid="binary.root.dist.patterns"/>
      </zipfileset>
      <zipfileset dir="${build.dir}" includes="build-demo.xml" fullpath="jwordnet-${version}/build.xml"/>
      <zipfileset prefix="jwordnet-${version}" dir="${build.dir}">
        <patternset refid="binary.build.dist.patterns"/>
      </zipfileset>
    </zip>
    <jwordnet-checksum file="${dist.dir}/jwordnet-${version}.zip"/>
  </target>

  <!-- ================================================================== -->
  <!-- packages the distribution with tar-gzip                            -->
  <!-- ================================================================== -->
  <!--                                                                    -->
  <!-- ================================================================== -->
  <target name="package-tgz" depends="package"
    description="--> Generates the JWordNet distribution as .tar.gz">

    <delete file="${build.dir}/jwordnet-${version}.tar"/>
    <delete file="${dist.dir}/jwordnet-${version}.tar.gz"/>
    <tar tarfile="${build.dir}/jwordnet-${version}.tar">
      <tarfileset prefix="jwordnet-${version}" dir=".">
        <patternset refid="binary.root.dist.patterns"/>
      </tarfileset>
      <tarfileset dir="${build.dir}" includes="build-demo.xml" fullpath="jwordnet-${version}/build.xml"/>
      <tarfileset prefix="jwordnet-${version}" dir="${build.dir}">
        <patternset refid="binary.build.dist.patterns"/>
      </tarfileset>
    </tar>

    <gzip zipfile="${dist.dir}/jwordnet-${version}.tar.gz"
      src="${build.dir}/jwordnet-${version}.tar"
      />
	<jwordnet-checksum file="${dist.dir}/jwordnet-${version}.tar.gz"/>
  </target>

  <!-- ================================================================== -->
  <!-- packages the distribution with zip and tar-gzip                    -->
  <!-- ================================================================== -->
  <!--                                                                    -->
  <!-- ================================================================== -->
  <target name="package-all-binary" depends="package-zip, package-tgz"
    description="--> Generates the .tar.gz and .zip distributions"/>

  <!-- ================================================================== -->
  <!-- same as package-all. it is just here for compatibility.            -->
  <!-- ================================================================== -->
  <!--                                                                    -->
  <!-- ================================================================== -->
  <target name="dist" depends="package-all-binary"/>

  <!-- ================================================================== -->
  <!-- S O U R C E  D I S T R I B U T I O N                               -->
  <!-- ================================================================== -->
  <target name="init-dist" >
    <!-- Package is not called first if packaging src standalone, so the dist.dir may not exist -->
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${dist.dir}"/>
    <mkdir dir="${maven.dist.dir}"/>
  </target>
  <!-- ================================================================== -->
  <!-- Packages the sources with zip                                      -->
  <!-- ================================================================== -->
  <!--                                                                    -->
  <!-- ================================================================== -->
  <target name="package-zip-src" depends="init, init-dist"
    description="--> Generates the JWordNet sources as .zip">
    <zip destfile="${dist.dir}/jwordnet-${version}-src.zip">
      <zipfileset prefix="jwordnet-${version}" dir=".">
        <patternset refid="src.dist.patterns"/>
      </zipfileset>
    </zip>
    <jwordnet-checksum file="${dist.dir}/jwordnet-${version}-src.zip"/>
  </target>

  <!-- ================================================================== -->
  <!-- Packages the sources with tar-gzip                                 -->
  <!-- ================================================================== -->
  <!--                                                                    -->
  <!-- ================================================================== -->
  <target name="package-tgz-src" depends="init, init-dist"
    description="--> Generates the JWordNet distribution as .tar.gz">

    <delete file="${build.dir}/jwordnet-${version}-src.tar"/>
    <delete file="${dist.dir}/jwordnet-${version}-src.tar.gz"/>
    <tar tarfile="${build.dir}/jwordnet-${version}-src.tar">
      <tarfileset prefix="jwordnet-${version}" dir=".">
        <patternset refid="src.dist.patterns"/>
      </tarfileset>
    </tar>

    <gzip zipfile="${dist.dir}/jwordnet-${version}-src.tar.gz"
          src="${build.dir}/jwordnet-${version}-src.tar"
    />
	<jwordnet-checksum file="${dist.dir}/jwordnet-${version}-src.tar.gz"/>
  </target>

  <!-- ================================================================== -->
  <!-- Packages the sources with zip and tar-gzip                         -->
  <!-- ================================================================== -->
  <!--                                                                    -->
  <!-- ================================================================== -->
  <target name="package-all-src" depends="package-zip-src, package-tgz-src"
    description="--> Generates the .tar.gz and .zip source distributions"/>

  <!-- ================================================================== -->
  <!-- same as package-all-src. it is just here for compatibility.        -->
  <!-- ================================================================== -->
  <!--                                                                    -->
  <!-- ================================================================== -->
  <target name="dist-src" depends="package-all-src"/>

  <target name="dist-all" depends="dist, dist-src"/>

  <macrodef name="jwordnet-checksum">
    <attribute name="file"/>
    <!-- NOTE: we use the value of @{file} in the names any properties
         set because macro's don't have variables, and otherwise we
         wouldn't be able to checksum more then one file per build
      -->
    <sequential>
      <checksum file="@{file}"
                property="@{file}.sum"
                algorithm="${checksum.algorithm}" />
      <basename file="@{file}" property="@{file}.base" />
      <concat destfile="@{file}.${checksum.algorithm}"
              force="yes"
              append="false"
              fixlastline="yes">
        <header trimleading="yes">${@{file}.sum}  </header>
        <!-- empty fileset to trick concat -->
        <fileset dir="." excludes="**" />
        <footer trimleading="yes">${@{file}.base}
        </footer>
      </concat>
    </sequential>
  </macrodef>

  <!--
   compile changes.txt into an html file
   -->

  <target name="changes-to-html">
    <mkdir dir="${changes.target.dir}"/>
    <exec executable="perl" input="CHANGES.txt" output="${changes.target.dir}/Changes.html" failonerror="true">
      <arg value="${changes.src.dir}/changes2html.pl"/>
    </exec>
    <copy todir="${changes.target.dir}">
      <fileset dir="${changes.src.dir}" includes="*.css"/>
    </copy>
  </target>

  <!--
   Committer helpers
   -->

  <property name="patch.file" value="${basedir}/../patches/${patch.name}"/>
  <!-- Apply a patch.  Assumes  patch can be applied in the basedir.
  -Dpatch.name assumes the patch is located in ${basedir}/../patches/${patch.name}
  -Dpatch.file means the patch can be located anywhere on the file system
  -->
  <target name="apply-patch" depends="clean" description="Apply a patch file.  Set -Dpatch.file, or -Dpatch.name when the patch is in the directory ../patches/">
    <patch patchfile="${patch.file}" strip="0"/>
  </target>
</project>
