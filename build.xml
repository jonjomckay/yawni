<?xml version="1.0" encoding="UTF-8"?>
<project name="jwordnet" default="all" basedir="." >

    <property name="builds.lib.dir" value="/builds/lib" />

    <!-- Main targets -->

    <target name="all" depends="build"/>

    <target name="build" depends="init,clean,compile,jar,jar.browser,jar.example"/>
    <target name="build.browser" depends="build,clean.browser,compile.browser,jar.browser"/>
    <target name="build.example" depends="build,clean.example,compile.example,jar.example"/>
    
    <property name="version" value="1.5.6"/>
    
    <!-- Child targets -->

    <!-- initialize variables. -->
    <target name="init">
        <tstamp>
            <format property="build.date" pattern="MM-dd-yyyy"/>
        </tstamp>

        <property name="outdir"  value="./classes"/>
        <property name="outdir.browser" value="./classes/browser_classes"/>
        <property name="outdir.example" value="./classes/example_classes"/>
        <property name="javadoc.dest" value="./docs/api"/>
        <property name="javadoc.source" value="./docs/src"/>
	<property name="jar.file" value="jwordnet-${version}.jar"/>
	<property name="jar.browser.file" value="jwordnet-browser-${version}.jar"/>
	<property name="jar.example.file" value="jwordnet-example-${version}.jar"/>

        <patternset id="patternset-javadocable-sources">
            <include name="**/*"/>
            <exclude name="**/*Test.java"/>
        </patternset>

        <available file="./edu" type="dir" property="src.exists"/>

	<available file="./browser/Browser.java" type="file" property="browser.src.exists"/>

	<available file="./example/Example.java" type="file" property="example.src.exists"/>
    </target>

    <!-- remove files/subdirectories created by build process -->
    <target name="clean" depends="init,clean.browser,clean.example">
       	<delete file="./lib/${jar.file}"/>
	<delete dir="${outdir}"/>
    </target>

    <target name="clean.browser" depends="init">
	<delete file="./lib/${jar.browser.file}"/>
       	<delete dir="${outdir.browser}"/>
    </target>

    <target name="clean.example" depends="init">
	<delete file="./lib/${jar.example.file}"/>
       	<delete dir="${outdir.example}"/>
    </target>


    <!-- 	javadoc targets 				-->
    <!-- 	These are not currently working properly. 	-->
    <!-- 	They need some additional debugging.      	-->

    <target name="docs" depends="init" if="src.exists">
        <delete dir="${javadoc.source}" />
        <delete dir="${javadoc.dest}" />
        <mkdir dir="${javadoc.source}"/>
        <antcall target="javadoc.copy" />
        <antcall target="javadoc.build" />
    </target>

    <target name="javadoc.copy" depends="init" if="src.exists">
        <mkdir dir="${javadoc.source}"/>
        <copy todir="${javadoc.source}">
            <fileset dir="./edu">
                <patternset refid="patternset-javadocable-sources"/>
            </fileset>
        </copy>
    </target>

    <target name="javadoc.build" depends="init,classpath" >
        <mkdir dir="${javadoc.dest}"/>
        <javadoc packagenames="edu.brandeis.*"
                classpathref="build.classpath"
                sourcepath="${javadoc.source}"
                defaultexcludes="yes"
                destdir="${javadoc.dest}"
                author="true"
                version="true"
                verbose="false"
                use="true">
        </javadoc>
        <delete dir="${javadoc.source}" />
    </target>

    <!-- set classpath -->
    <target name="classpath" depends="init" >
        <path id="build.classpath">
            <fileset dir="lib">
                <include name="**/*.jar"/>
            </fileset>
        </path>
    </target>

    <target name="compile" depends="init,classpath" if="src.exists">
        <mkdir dir="${outdir}"/>
        <javac srcdir="./edu" destdir="${outdir}" deprecation="true" debug="true">
            <classpath refid="build.classpath"/>
        </javac>
        <copy todir="${outdir}">
            <fileset dir="./conf" includes="**/*.properties">
            </fileset>
        </copy>
    </target>

    <target name="jar" depends="init,jar.src"/>

    <target name="jar.src" depends="compile" if="src.exists">
        <mkdir dir="./lib"/>
        <jar jarfile="./lib/${jar.file}" basedir="${outdir}" update="false"/>
    </target>


    <target name="compile.browser" depends="init,classpath" if="src.exists">
        <mkdir dir="${outdir.browser}"/>
        <javac srcdir="./browser" destdir="${outdir.browser}" deprecation="true" debug="true">
            <classpath refid="build.classpath"/>
        </javac>
        <copy todir="${outdir.browser}">
            <fileset dir="./conf" includes="**/*.properties">
            </fileset>
        </copy>
    </target>

    <target name="compile.example" depends="init,classpath" if="src.exists">
        <mkdir dir="${outdir.example}"/>
        <javac srcdir="./example" destdir="${outdir.example}" deprecation="true" debug="true">
            <classpath refid="build.classpath"/>
        </javac>
        <copy todir="${outdir.example}">
            <fileset dir="./conf" includes="**/*.properties">
            </fileset>
        </copy>
    </target>

    <target name="jar.browser" depends="init,jar.src.browser"/>
    <target name="jar.example" depends="init,jar.src.example"/>

    <target name="jar.src.browser" depends="compile.browser" if="browser.src.exists">
        <mkdir dir="./lib"/>
        <jar jarfile="./lib/${jar.browser.file}" basedir="${outdir.browser}" update="false"/>
    </target>

    <target name="jar.src.example" depends="compile.example" if="example.src.exists">
        <mkdir dir="./lib"/>
        <jar jarfile="./lib/${jar.example.file}" basedir="${outdir.example}" update="false"/>
    </target>
</project>
